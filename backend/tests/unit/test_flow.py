"""
Unit tests for flow models.

Tests the functionality of Flow model including
initialization, field validation, and multi-group support.
"""
import pytest
from datetime import datetime
from unittest.mock import patch
import uuid

from src.models.flow import Flow


class TestFlow:
    """Test cases for Flow model."""
    
    def test_flow_creation(self):
        """Test basic Flow creation."""
        flow = Flow(name="Test Flow")
        
        assert flow.name == "Test Flow"
        assert flow.crew_id is None
        assert isinstance(flow.nodes, list)
        assert isinstance(flow.edges, list)
        assert isinstance(flow.flow_config, dict)
    
    def test_flow_with_all_fields(self):
        """Test Flow creation with all fields."""
        crew_id = uuid.uuid4()
        flow_id = uuid.uuid4()
        nodes = [{"id": "node1", "type": "start"}]
        edges = [{"id": "edge1", "source": "node1", "target": "node2"}]
        config = {"timeout": 300, "retry_count": 3}
        
        flow = Flow(
            id=flow_id,
            name="Complete Flow",
            crew_id=crew_id,
            nodes=nodes,
            edges=edges,
            flow_config=config
        )
        
        assert flow.id == flow_id
        assert flow.name == "Complete Flow"
        assert flow.crew_id == crew_id
        assert flow.nodes == nodes
        assert flow.edges == edges
        assert flow.flow_config == config
    
    def test_flow_id_default_generation(self):
        """Test that Flow id is auto-generated by default."""
        flow = Flow(name="Test Flow")
        
        assert flow.id is not None
        assert isinstance(flow.id, uuid.UUID)
    
    def test_flow_custom_id(self):
        """Test Flow with custom UUID id."""
        custom_id = uuid.uuid4()
        flow = Flow(id=custom_id, name="Custom ID Flow")
        
        assert flow.id == custom_id
    
    def test_flow_crew_id_foreign_key(self):
        """Test Flow with crew_id foreign key."""
        crew_id = uuid.uuid4()
        flow = Flow(name="Crew Flow", crew_id=crew_id)
        
        assert flow.crew_id == crew_id
    
    def test_flow_nodes_initialization(self):
        """Test Flow nodes field initialization."""
        # Default empty list
        flow1 = Flow(name="Flow 1")
        assert flow1.nodes == []
        
        # Custom nodes
        nodes = [{"id": "start", "type": "start_node"}]
        flow2 = Flow(name="Flow 2", nodes=nodes)
        assert flow2.nodes == nodes
        
        # None should be converted to empty list
        flow3 = Flow(name="Flow 3", nodes=None)
        assert flow3.nodes == []
    
    def test_flow_edges_initialization(self):
        """Test Flow edges field initialization."""
        # Default empty list
        flow1 = Flow(name="Flow 1")
        assert flow1.edges == []
        
        # Custom edges
        edges = [{"id": "edge1", "source": "node1", "target": "node2"}]
        flow2 = Flow(name="Flow 2", edges=edges)
        assert flow2.edges == edges
        
        # None should be converted to empty list
        flow3 = Flow(name="Flow 3", edges=None)
        assert flow3.edges == []
    
    def test_flow_config_initialization(self):
        """Test Flow flow_config field initialization."""
        # Default with actions
        flow1 = Flow(name="Flow 1")
        assert flow1.flow_config == {"actions": []}
        
        # Custom config
        config = {"timeout": 300, "actions": ["action1"]}
        flow2 = Flow(name="Flow 2", flow_config=config)
        assert flow2.flow_config == config
        
        # None should be converted to default
        flow3 = Flow(name="Flow 3", flow_config=None)
        assert flow3.flow_config == {"actions": []}
        
        # Dict without actions should have actions added
        config_no_actions = {"timeout": 300}
        flow4 = Flow(name="Flow 4", flow_config=config_no_actions)
        assert flow4.flow_config == {"timeout": 300, "actions": []}
    
    def test_flow_group_fields(self):
        """Test Flow group-related fields."""
        flow = Flow(
            name="Group Flow",
            group_id="group_123",
            created_by_email="user@group.com"
        )
        
        assert flow.group_id == "group_123"
        assert flow.created_by_email == "user@group.com"
        assert flow.tenant_id is None  # Legacy field should be None
    
    def test_flow_legacy_tenant_fields(self):
        """Test Flow legacy tenant fields."""
        flow = Flow(
            name="Tenant Flow",
            tenant_id="tenant_456"
        )
        
        assert flow.tenant_id == "tenant_456"
        assert flow.group_id is None  # New field should be None
    
    def test_flow_timestamps(self):
        """Test Flow timestamp fields."""
        with patch('src.models.flow.datetime') as mock_datetime:
            mock_now = datetime(2023, 1, 1, 12, 0, 0)
            mock_datetime.utcnow.return_value = mock_now
            
            flow = Flow(name="Timestamp Flow")
            
            assert flow.created_at == mock_now
            assert flow.updated_at == mock_now
    
    def test_flow_custom_timestamps(self):
        """Test Flow with custom timestamps."""
        created_time = datetime(2023, 1, 1, 10, 0, 0)
        updated_time = datetime(2023, 1, 1, 11, 0, 0)
        
        flow = Flow(
            name="Custom Timestamp Flow",
            created_at=created_time,
            updated_at=updated_time
        )
        
        assert flow.created_at == created_time
        assert flow.updated_at == updated_time
    
    def test_flow_tablename(self):
        """Test Flow table name."""
        assert Flow.__tablename__ == "flows"


class TestFlowInitialization:
    """Test cases for Flow __init__ method."""
    
    def test_flow_init_with_kwargs(self):
        """Test Flow initialization with keyword arguments."""
        flow = Flow(
            name="Test Flow",
            group_id="group_123",
            nodes=[{"id": "node1"}],
            edges=[{"id": "edge1"}],
            flow_config={"timeout": 300}
        )
        
        assert flow.name == "Test Flow"
        assert flow.group_id == "group_123"
        assert flow.nodes == [{"id": "node1"}]
        assert flow.edges == [{"id": "edge1"}]
        assert flow.flow_config == {"timeout": 300, "actions": []}
    
    def test_flow_init_nodes_none_handling(self):
        """Test Flow initialization when nodes is None."""
        flow = Flow(name="Test Flow", nodes=None)
        
        assert flow.nodes == []
        assert isinstance(flow.nodes, list)
    
    def test_flow_init_edges_none_handling(self):
        """Test Flow initialization when edges is None."""
        flow = Flow(name="Test Flow", edges=None)
        
        assert flow.edges == []
        assert isinstance(flow.edges, list)
    
    def test_flow_init_flow_config_none_handling(self):
        """Test Flow initialization when flow_config is None."""
        flow = Flow(name="Test Flow", flow_config=None)
        
        assert flow.flow_config == {"actions": []}
        assert isinstance(flow.flow_config, dict)
    
    def test_flow_init_flow_config_without_actions(self):
        """Test Flow initialization when flow_config doesn't have actions."""
        config = {"timeout": 300, "retry_count": 3}
        flow = Flow(name="Test Flow", flow_config=config)
        
        expected_config = {"timeout": 300, "retry_count": 3, "actions": []}
        assert flow.flow_config == expected_config
    
    def test_flow_init_flow_config_with_actions(self):
        """Test Flow initialization when flow_config already has actions."""
        config = {"timeout": 300, "actions": ["existing_action"]}
        flow = Flow(name="Test Flow", flow_config=config)
        
        assert flow.flow_config == config
        assert flow.flow_config["actions"] == ["existing_action"]
    
    def test_flow_init_superclass_called(self):
        """Test that Flow initialization calls superclass __init__."""
        # This test ensures that SQLAlchemy Base.__init__ is called
        flow = Flow(name="Test Flow")
        
        # Should have SQLAlchemy instance attributes
        assert hasattr(flow, '__class__')
        assert hasattr(flow, '__tablename__')


class TestFlowFieldTypes:
    """Test cases for Flow field types and constraints."""
    
    def test_flow_field_existence(self):
        """Test that all expected fields exist."""
        flow = Flow(name="Test Flow")
        
        # Check field existence
        assert hasattr(flow, 'id')
        assert hasattr(flow, 'name')
        assert hasattr(flow, 'crew_id')
        assert hasattr(flow, 'nodes')
        assert hasattr(flow, 'edges')
        assert hasattr(flow, 'flow_config')
        assert hasattr(flow, 'group_id')
        assert hasattr(flow, 'tenant_id')
        assert hasattr(flow, 'created_by_email')
        assert hasattr(flow, 'created_at')
        assert hasattr(flow, 'updated_at')
    
    def test_flow_uuid_fields(self):
        """Test UUID field types."""
        crew_id = uuid.uuid4()
        flow = Flow(name="UUID Flow", crew_id=crew_id)
        
        # id should be UUID type
        assert isinstance(flow.id, uuid.UUID)
        assert isinstance(flow.crew_id, uuid.UUID)
        assert flow.crew_id == crew_id
    
    def test_flow_string_fields(self):
        """Test string field values."""
        flow = Flow(
            name="String Test Flow",
            group_id="group_123",
            tenant_id="tenant_456",
            created_by_email="user@test.com"
        )
        
        assert isinstance(flow.name, str)
        assert isinstance(flow.group_id, str)
        assert isinstance(flow.tenant_id, str)
        assert isinstance(flow.created_by_email, str)
    
    def test_flow_json_fields(self):
        """Test JSON field types."""
        nodes = [{"id": "node1", "type": "start"}]
        edges = [{"id": "edge1", "source": "node1", "target": "node2"}]
        config = {"timeout": 300, "actions": ["action1"]}
        
        flow = Flow(
            name="JSON Flow",
            nodes=nodes,
            edges=edges,
            flow_config=config
        )
        
        assert isinstance(flow.nodes, list)
        assert isinstance(flow.edges, list)
        assert isinstance(flow.flow_config, dict)
    
    def test_flow_datetime_fields(self):
        """Test datetime field types."""
        flow = Flow(name="DateTime Flow")
        
        # created_at and updated_at should be datetime objects
        assert isinstance(flow.created_at, datetime)
        assert isinstance(flow.updated_at, datetime)
    
    def test_flow_nullable_fields(self):
        """Test nullable field behavior."""
        flow = Flow(name="Nullable Flow")
        
        # These fields should be nullable
        assert flow.crew_id is None
        assert flow.group_id is None
        assert flow.tenant_id is None
        assert flow.created_by_email is None
    
    def test_flow_non_nullable_fields(self):
        """Test non-nullable field requirements."""
        flow = Flow(name="Non-nullable Flow")
        
        # name is non-nullable
        assert flow.name is not None
        assert flow.name == "Non-nullable Flow"


class TestFlowComplexData:
    """Test cases for Flow with complex data structures."""
    
    def test_flow_complex_nodes(self):
        """Test Flow with complex node structures."""
        complex_nodes = [
            {
                "id": "start_node",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "label": "Start",
                    "config": {"auto_start": True}
                }
            },
            {
                "id": "task_node",
                "type": "task",
                "position": {"x": 300, "y": 100},
                "data": {
                    "label": "Process Task",
                    "config": {
                        "timeout": 3600,
                        "retry_count": 3,
                        "parameters": ["param1", "param2"]
                    }
                }
            }
        ]
        
        flow = Flow(name="Complex Nodes Flow", nodes=complex_nodes)
        
        assert len(flow.nodes) == 2
        assert flow.nodes[0]["id"] == "start_node"
        assert flow.nodes[0]["data"]["config"]["auto_start"] is True
        assert flow.nodes[1]["data"]["config"]["timeout"] == 3600
    
    def test_flow_complex_edges(self):
        """Test Flow with complex edge structures."""
        complex_edges = [
            {
                "id": "edge1",
                "source": "start_node",
                "target": "task_node",
                "type": "default",
                "data": {
                    "conditions": [
                        {"field": "status", "operator": "equals", "value": "ready"}
                    ]
                }
            },
            {
                "id": "edge2",
                "source": "task_node",
                "target": "end_node",
                "type": "conditional",
                "data": {
                    "conditions": [
                        {"field": "result", "operator": "not_empty"},
                        {"field": "error_count", "operator": "less_than", "value": 3}
                    ]
                }
            }
        ]
        
        flow = Flow(name="Complex Edges Flow", edges=complex_edges)
        
        assert len(flow.edges) == 2
        assert flow.edges[0]["source"] == "start_node"
        assert flow.edges[0]["data"]["conditions"][0]["value"] == "ready"
        assert flow.edges[1]["type"] == "conditional"
        assert len(flow.edges[1]["data"]["conditions"]) == 2
    
    def test_flow_complex_config(self):
        """Test Flow with complex configuration."""
        complex_config = {
            "timeout": 7200,
            "retry_policy": {
                "max_retries": 5,
                "backoff_factor": 2.0,
                "retry_on": ["timeout", "connection_error"]
            },
            "notifications": {
                "on_success": ["email", "webhook"],
                "on_failure": ["email", "slack"],
                "recipients": ["admin@test.com", "ops@test.com"]
            },
            "variables": {
                "environment": "production",
                "region": "us-west-2",
                "instance_type": "large"
            },
            "actions": [
                {
                    "id": "action1",
                    "type": "webhook",
                    "config": {"url": "https://api.example.com/webhook"}
                }
            ]
        }
        
        flow = Flow(name="Complex Config Flow", flow_config=complex_config)
        
        assert flow.flow_config["timeout"] == 7200
        assert flow.flow_config["retry_policy"]["max_retries"] == 5
        assert "email" in flow.flow_config["notifications"]["on_success"]
        assert flow.flow_config["variables"]["environment"] == "production"
        assert len(flow.flow_config["actions"]) == 1


class TestFlowUsagePatterns:
    """Test cases for common Flow usage patterns."""
    
    def test_flow_workflow_definition(self):
        """Test Flow as workflow definition."""
        workflow_flow = Flow(
            name="Data Processing Workflow",
            nodes=[
                {"id": "start", "type": "start", "data": {"label": "Start"}},
                {"id": "extract", "type": "task", "data": {"label": "Extract Data"}},
                {"id": "transform", "type": "task", "data": {"label": "Transform Data"}},
                {"id": "load", "type": "task", "data": {"label": "Load Data"}},
                {"id": "end", "type": "end", "data": {"label": "End"}}
            ],
            edges=[
                {"id": "e1", "source": "start", "target": "extract"},
                {"id": "e2", "source": "extract", "target": "transform"},
                {"id": "e3", "source": "transform", "target": "load"},
                {"id": "e4", "source": "load", "target": "end"}
            ],
            flow_config={
                "description": "ETL workflow for data processing",
                "actions": []
            }
        )
        
        assert len(workflow_flow.nodes) == 5
        assert len(workflow_flow.edges) == 4
        assert workflow_flow.flow_config["description"] == "ETL workflow for data processing"
    
    def test_flow_group_isolation(self):
        """Test Flow group isolation pattern."""
        # Group A flow
        group_a_flow = Flow(
            name="Group A Workflow",
            group_id="group_a",
            created_by_email="user@groupa.com"
        )
        
        # Group B flow
        group_b_flow = Flow(
            name="Group B Workflow",
            group_id="group_b",
            created_by_email="user@groupb.com"
        )
        
        # Verify group isolation
        assert group_a_flow.group_id == "group_a"
        assert group_a_flow.created_by_email == "user@groupa.com"
        assert group_b_flow.group_id == "group_b"
        assert group_b_flow.created_by_email == "user@groupb.com"
    
    def test_flow_versioning_pattern(self):
        """Test Flow versioning pattern."""
        base_flow = Flow(
            name="Workflow v1.0",
            nodes=[{"id": "task1", "type": "task"}],
            flow_config={"version": "1.0", "actions": []}
        )
        
        updated_flow = Flow(
            name="Workflow v1.1",
            nodes=[
                {"id": "task1", "type": "task"},
                {"id": "task2", "type": "task"}
            ],
            flow_config={"version": "1.1", "actions": []}
        )
        
        assert base_flow.flow_config["version"] == "1.0"
        assert len(base_flow.nodes) == 1
        
        assert updated_flow.flow_config["version"] == "1.1"
        assert len(updated_flow.nodes) == 2
    
    def test_flow_migration_compatibility(self):
        """Test Flow migration compatibility between tenant and group fields."""
        # Legacy tenant-based flow
        tenant_flow = Flow(
            name="Legacy Tenant Flow",
            tenant_id="tenant_123"
        )
        
        # New group-based flow
        group_flow = Flow(
            name="New Group Flow",
            group_id="group_456",
            created_by_email="user@group.com"
        )
        
        # Verify both can coexist
        assert tenant_flow.tenant_id == "tenant_123"
        assert tenant_flow.group_id is None
        
        assert group_flow.group_id == "group_456"
        assert group_flow.tenant_id is None
    
    def test_flow_crew_association(self):
        """Test Flow association with crew."""
        crew_id = uuid.uuid4()
        flow = Flow(
            name="Crew Associated Flow",
            crew_id=crew_id,
            nodes=[{"id": "crew_task", "type": "crew_execution"}],
            flow_config={"crew_timeout": 3600, "actions": []}
        )
        
        assert flow.crew_id == crew_id
        assert flow.nodes[0]["type"] == "crew_execution"
        assert flow.flow_config["crew_timeout"] == 3600